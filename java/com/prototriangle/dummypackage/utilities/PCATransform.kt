package com.specknet.orientandroid.utilities

import kotlinx.coroutines.*
import org.apache.commons.math3.exception.DimensionMismatchException

val defaultMeans = floatArrayOf(0.26414103942962636f, 0.1138465382795691f, 0.47425637229034856f, -0.2105218116159771f, -0.42525361367265635f, 0.8995099859630049f, 0.42219447510548636f, 1.182580052160666f, 0.49826076030906796f, -2.884672124701145f, 0.8288784341092869f, 0.1819093840442932f, 0.6076992989623793f, 0.2026534122432746f, 0.16055530417824215f, 0.8108405935017997f, 0.8423540329684156f)
val defaultCoefficients = arrayOf(
        floatArrayOf(-0.002133612580228472f, -2.875118731689173e-05f, -0.003622208428565375f, 0.0006797995151737844f, 0.003118049514318769f, -0.006740257942884208f, -0.000751825210524896f, 0.0014556213909117557f, 0.006985322770486467f, 0.8070146497132559f, 0.004336707061076197f, 0.4057538579766624f, 0.0062426558219071246f, 0.0008446457500784335f, -0.0017194143136371742f, 0.004492079224300353f, 0.42881787246821357f),
        floatArrayOf(0.0011853981323263478f, 0.00047836006202241275f, 0.0012320720860557733f, -0.0004129841370642067f, -0.002290271052474864f, 0.003522343138530475f, 0.0017590270312723916f, -0.0008471873386345767f, -0.003968558962636609f, -0.586889880231257f, -0.002012959388999549f, 0.4734093458088969f, -0.0030764968741032565f, -0.0011036549111843753f, 0.001078371264675858f, -0.0015478358286162032f, 0.6567990789045834f),
        floatArrayOf(0.0024253157020180213f, 0.0027188248443586515f, 0.004439884629894155f, -0.004226514526943218f, -0.0036589806623044427f, 0.008098865292198448f, 0.009473924775539754f, 0.0016284725906662314f, -0.004692079655334436f, -0.06327933039281883f, -0.0018606395216404586f, 0.7817127161300086f, -0.003795957482161045f, -0.00715459602853698f, 0.0020824225724097663f, -0.002511530394948908f, -0.6201588500465233f),
        floatArrayOf(0.12043056131789832f, 0.04434764491866636f, 0.18816326690414414f, -0.08213640447360206f, -0.17367794932410466f, 0.36184121622824883f, 0.1750980613324037f, -0.17616610671321145f, -0.4891105137075199f, 0.016482178966245802f, -0.34103080713209694f, -0.008251541576004056f, -0.4481708036875372f, -0.14207732765445424f, 0.11916722280320008f, -0.3569144054988341f, 0.009403505212089608f),
        floatArrayOf(0.14501285153175084f, 0.05021907711900106f, 0.21464729903262003f, -0.10063346001346647f, -0.31964529317156515f, 0.5342925922041852f, 0.1892965286313323f, 0.4194792848985925f, 0.03921455831328297f, 0.0026894920642042586f, 0.28338567546630083f, -0.007768186102752484f, 0.16669259460612273f, -0.2881845519175896f, 0.0057124984474912245f, 0.3577684685464328f, 0.0055280805558202695f),
        floatArrayOf(-0.06707151396502747f, -0.026807023365316197f, -0.0666595212669809f, 0.05236873327674236f, 0.1339963793601784f, -0.20065590062715924f, -0.08366579401024395f, -0.09801316871699929f, 0.09159477446557879f, -0.0014071834928427122f, -0.0372643663149805f, -0.0024952377071291837f, 0.028301188635744615f, -0.9452669695916419f, -0.02103066222885619f, -0.0906171604498875f, 0.0012850528905069963f),
        floatArrayOf(-0.06234832594237819f, 0.21730540130339718f, -0.15504868058343282f, -0.4297126262708113f, 0.09496972798841488f, -0.25001840857184704f, 0.7979481683838621f, -0.08744510373533869f, 0.05304766993060131f, -0.0015138012739617948f, 0.0063093345563634785f, -0.00597125282796798f, 0.05280437423421248f, -0.011495676743980105f, 0.1226259753082795f, 0.05868646544760586f, 0.002853213021071124f),
        floatArrayOf(-0.021079562535759554f, -0.02305417996042153f, -0.5238185490066601f, 0.07865412112354896f, -0.467151437170127f, -0.05666711183653691f, -0.1186027040669768f, -0.32231614050397217f, -0.30459654110537143f, 0.00030659590049112286f, 0.005099124264481546f, 0.0011184085010728262f, 0.07418472390577427f, -0.04121179153529972f, 0.33002598651417997f, 0.41246407834918386f, -0.0019848514402953897f),
        floatArrayOf(0.23903396587471526f, 0.010481111141658105f, -0.28269009175584237f, -0.009859246779026122f, 0.019180452363011177f, -0.30187054411885644f, 0.012364350237652295f, 0.4238683091809696f, -0.29647928545572855f, -6.378667492657532e-05f, 0.07854983748756038f, 0.00022501736248723453f, -0.48218931657642305f, -0.032032110889917684f, -0.4689569582834463f, 0.2095411067670486f, -0.0005340673444980783f),
        floatArrayOf(-0.12185981918196884f, -0.004030537625690837f, -0.14311923223088377f, -0.048220226583614106f, -0.32306487159027647f, 0.1799456393593917f, 0.10445728907037254f, -0.34274089289041215f, 0.06379082736369555f, -0.00026417561303061733f, -0.08129523891791339f, -9.266221275208587e-05f, 0.2488465735940388f, 0.005164812391677868f, -0.7794513823007984f, -0.13045142513517305f, -0.00023874974189168826f),
        floatArrayOf(-0.06442954540846658f, -0.04586123567459616f, 0.3858247434278993f, -0.31607202018908087f, 0.33764416864612445f, 0.04818057478177199f, -0.15958253510148537f, -0.4342117537091357f, -0.15497288873844584f, 7.803621555783182e-05f, 0.03012730452809937f, 0.0007284833827471571f, -0.14368511670033973f, -0.015172355623262955f, -0.16010473966974073f, 0.5858480149596446f, -0.0003409467032449659f),
        floatArrayOf(-0.032245575115017557f, 0.11372861570506504f, 0.1401858551996226f, 0.822259482111752f, 0.10997633096530016f, 0.030209524234344406f, 0.4117651673612151f, -0.1740643375420705f, 0.03687745220918476f, -2.8043357185643014e-05f, 0.01212835634992362f, -0.0006342140289447678f, -0.13140627710454442f, 0.003454184151657348f, -0.05853762142808943f, 0.2349324967636113f, -0.00014429075654237688f),
        floatArrayOf(0.03034623561584155f, 0.10919664224643304f, 0.11527327596374684f, 0.1042143298713651f, 0.23438609848063588f, -0.11911282251688224f, 0.02211466856223621f, 0.14474149585950635f, -0.6938173370031248f, -1.764634730981373e-05f, -0.010501734714169755f, -0.00012109180689835558f, 0.617968667804123f, -0.006293790066583992f, -0.06510942974336649f, -0.06917987071067508f, -2.644111478113522e-05f),
        floatArrayOf(0.06595615325903216f, -0.9478510340009889f, 0.008242357745617017f, 0.015119205065121861f, 0.03255963632444032f, -0.024317278578843693f, 0.2607260618974223f, -0.02577302675188146f, -0.08623915961190348f, 8.547434954942347e-05f, 0.12327112085124871f, 0.00020577002924429257f, 0.042524930757159116f, 0.003486735428609573f, 0.020055601271006435f, -0.04221514202660898f, -6.480576578390666e-05f),
        floatArrayOf(-0.48617351844046963f, -0.1454699805512556f, 0.00018085283564118554f, -0.001184859992706714f, -0.023881842427336795f, 0.02406269526297663f, 0.03248726080762045f, 0.3575501077126164f, 0.04223000162555458f, 1.5900791469264358e-05f, -0.7298565447534039f, 0.00011072713798939777f, 0.042952839346078305f, -0.0018640346545251796f, -0.013449649960754982f, 0.27553987745044095f, -3.3630217524429216e-05f),
        floatArrayOf(0.7980049307260678f, -0.01901066544477274f, -0.004298106677961431f, 0.0009653148690080853f, 0.04113306189326956f, -0.04543116857123396f, 0.004725630142688371f, -0.08016164393018523f, 0.21729015450283282f, 4.464878751480461e-06f, -0.48997898813457136f, 2.271687614660319e-05f, 0.21051903739372724f, 0.0005140140184166137f, -0.0037268378014537855f, 0.14483210823491582f, -1.3473066395780554e-05f),
        floatArrayOf(-1.46249551e-15f, -1.69868013e-14f, 5.77350269e-01f, -3.42331345e-16f, -5.77350269e-01f, -5.77350269e-01f, -1.32723459e-16f, 1.41205536e-15f, -9.73340368e-16f, -4.28258667e-17f, 2.15308953e-15f, -9.73679354e-17f, -2.09986659e-16f, 5.28077409e-17f, 4.03369162e-16f, -1.13993827e-15f, 1.05808458e-16f)
)


class PCATransform(private val means: FloatArray, private val coefficients: Array<FloatArray>) {

    constructor() : this(defaultMeans, defaultCoefficients)

    constructor(meanPath: String, coeffPath: String) : this(
            getMeansFromPath(meanPath),
            getCoeffsFromPath(coeffPath)
    )

    companion object {
        @JvmStatic
        private fun getCoeffsFromPath(coeffPath: String): Array<FloatArray> {
            // TODO: file reader
            return Array(1) { FloatArray(1) }
        }

        @JvmStatic
        private fun getMeansFromPath(meanPath: String): FloatArray {
            // TODO: file reader
            return FloatArray(1)
        }
    }

    val inputLength by lazy { means.size }

    val outpLengthFilter by lazy { coefficients.size }

    init {
        runBlocking {
            checkDimensions()
        }
    }

    private suspend fun checkDimensions() {
        coroutineScope {
            val checks = ArrayList<Deferred<Boolean>>()
            for (cList in coefficients) {
                checks.add(async { cList.size == inputLength })
            }
            for (check in checks) {
                if (!check.await())
                    throw Exception("Dimension mismatch in configuration: if input length is $inputLength, coeffs shape should be [n x $inputLength] where n is the length of the output vector.")

            }
        }
    }

    fun transform(input: FloatArray): FloatArray {
        val newValues = FloatArray(coefficients.size)
        val translated = input - means
        for (j in 0 until coefficients.size) {
//            var sum = 0.0f
//            for (i in 0 until input.size) {
//                sum += translated[i] * coefficients[j][i]
//            }
//            newValues[j] = sum
            newValues[j] = translated.dot(coefficients[j])
        }
        return newValues
    }
}